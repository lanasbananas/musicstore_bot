from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ParseMode
from aiogram import executor
import asyncio
import db
import requests
from bs4 import BeautifulSoup

bot = Bot('TOKEN')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
good_num = 0


def download_image(url, filename):
    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(filename, 'wb') as file:
            for chunk in response.iter_content(1024):
                file.write(chunk)
        return True
    else:
        return False


def get_categories():
    url = 'https://skifmusic.ru'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    menu_items = soup.find_all('div', class_='header-menu__nav-item', attrs={'data-ix': True})
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    item_info = [{'name': item.find('a').text.strip(), 'link': item.find('a')['href']} for item in menu_items]
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞
    item_names = [item['name'] for item in item_info]
    item_links = [item['link'] for item in item_info]
    return item_names, item_links


def get_good_categories(link):
    response = requests.get('https://skifmusic.ru' + link)
    soup = BeautifulSoup(response.text, 'html.parser')
    categories = soup.find_all('a', class_='catalog-block-menu__item')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö
    category_info = [{'name': category.find('div', class_='catalog-block-menu__name').text.strip(),
                      'link': category['href']}
                     for category in categories]

    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞
    category_names = [info['name'] for info in category_info]
    category_links = [info['link'] for info in category_info]
    return category_names, category_links


def get_goods(link):
    response = requests.get('https://skifmusic.ru' + link)
    soup = BeautifulSoup(response.text, 'html.parser')
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    items = soup.select('.cards-list__item')

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    titles = []
    images = []
    prices = []
    links = []

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for item in items:
        title = item.select_one('.product-card__link').text.strip()
        image = item.select_one('.product-card__image img')['src']
        price = item.select_one('.product-card__price').text.strip()
        link = item.select_one('.product-card__link')['href']

        titles.append(title)
        images.append(image)
        prices.append(price)
        links.append(link)
    return titles, images, prices, links


def navigation_button():
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='prev')
    button2 = types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data='next')
    markup.add(button1, button2)
    return markup


@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='–¢–æ–≤–∞—Ä—ãüé∏', callback_data='goods')
    button2 = types.InlineKeyboardButton(text='–û –Ω–∞—Å‚ÑπÔ∏è', callback_data='info')
    button3 = types.InlineKeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ãüîç', callback_data='contacts')
    markup.add(button1, button2, button3)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üôÇ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—éüëáüèª", reply_markup=markup)
    if len(await db.get_id_on_userid(user_id)) == 0:
        await db.add_user(str(user_id), user_name)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'info')
async def handle_prev(callback_query: types.CallbackQuery):
    await callback_query.message.answer(f'*–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ?*\n\n'
                                        f'_SKIFMUSIC_ - —ç—Ç–æ –∫—Ä—É–ø–Ω–µ–π—à–∞—è —Å–µ—Ç—å –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π '
                                        f'–º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—Ç –≥–æ—Ä–æ–¥–∞ –ù–∞—Ö–æ–¥–∫–∏ –¥–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞, –ú–æ—Å–∫–≤—ã, –°–∞–º–∞—Ä—ã, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞, '
                                        f'–ö–∞–∑–∞–Ω–∏ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö. –ú—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ–º –º—É–∑—ã–∫–æ–π —Å 2005 –≥–æ–¥–∞.\n\n'
                                        f'–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—Å —á–∏—Ç–∞–π—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://info.skifmusic.ru/company', parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'contacts')
async def handle_prev(callback_query: types.CallbackQuery):
    await callback_query.message.answer(f'*–¢–µ–ª–µ—Ñ–æ–Ω*\n\n +7-846-226-51-17\n\n*–ê–¥—Ä–µ—Å*\n\n—É–ª. –ì–∞–ª–∞–∫—Ç–∏–æ–Ω–æ–≤—Å–∫–∞—è, –¥.102–ê\n\n'
                                        f'*–ü–æ—á—Ç–∞*\n\n sales@skifmusic.ru ‚Äî –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n '
                                        f'warranty@skifmusic.ru ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—è –∏–ª–∏ –æ–±–º–µ–Ω/–≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ \n'
                                        f'used@skifmusic.ru ‚Äî –≤—ã–∫—É–ø, –æ–±–º–µ–Ω –∏ –∫–æ–º–∏—Å—Å–∏—è –≥–∏—Ç–∞—Ä\n\n'
                                        f'–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è: https://yandex.ru/maps/-/CDufR8JY', parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'goods')
async def handle_prev(callback_query: types.CallbackQuery):
    names, _ = get_categories()
    markup = types.InlineKeyboardMarkup()
    buttons = []
    i = 0
    for name in names:
        buttons.append(types.InlineKeyboardButton(text=f'{name}', callback_data=f'category_{i}'))
        i += 1
    for button in buttons:
        markup.add(button)
    await callback_query.message.answer(f"–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('category_'))
async def handle_category(callback_query: types.CallbackQuery):
    category_index = int(callback_query.data.split('_')[1])
    names, links = get_categories()
    names_good, links_good = get_good_categories(links[category_index])
    markup = types.InlineKeyboardMarkup()
    buttons = []
    i = 0
    for name in names_good:
        buttons.append(types.InlineKeyboardButton(text=f'{name}', callback_data=f'category-good_{category_index}_{i}'))
        i += 1
    for button in buttons:
        markup.add(button)
    await callback_query.message.answer(f"–ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥:", reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('category-good_'))
async def handle_category(callback_query: types.CallbackQuery):
    global good_num
    category_index = int(callback_query.data.split('_')[1])
    category_good_index = int(callback_query.data.split('_')[2])
    names, links = get_categories()
    names_good, links_good = get_good_categories(links[category_index])
    n, im, p, l = get_goods(links_good[category_good_index])
    filename = 'good.jpg'
    if download_image(im[0], filename):
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª {filename}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {n[0]}\n–¶–µ–Ω–∞: {p[0]}\n{'-' * 30}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {l[0]}"
    good_num = 0
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'prev-good_{category_index}_{category_good_index}')
    button2 = types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next-good_{category_index}_{category_good_index}')
    markup.add(button1, button2)
    await callback_query.message.answer_photo(open(filename, 'rb'), caption=text, reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('prev-good_'))
async def handle_category(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    global good_num
    good_num -= 1
    category_index = int(callback_query.data.split('_')[1])
    category_good_index = int(callback_query.data.split('_')[2])
    names, links = get_categories()
    names_good, links_good = get_good_categories(links[category_index])
    n, im, p, l = get_goods(links_good[category_good_index])
    filename = 'good.jpg'
    if download_image(im[good_num], filename):
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª {filename}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    await bot.delete_message(chat_id, callback_query.message.message_id)
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {n[good_num]}\n–¶–µ–Ω–∞: {p[good_num]}\n{'-' * 30}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {l[good_num]}"
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'prev-good_{category_index}_{category_good_index}')
    button2 = types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next-good_{category_index}_{category_good_index}')
    markup.add(button1, button2)
    await callback_query.message.answer_photo(open('good.jpg', 'rb'), caption=text, reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('next-good_'))
async def handle_category(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    global good_num
    good_num +=1
    category_index = int(callback_query.data.split('_')[1])
    category_good_index = int(callback_query.data.split('_')[2])
    names, links = get_categories()
    names_good, links_good = get_good_categories(links[category_index])
    n, im, p, l = get_goods(links_good[category_good_index])
    filename = 'good.jpg'
    if download_image(im[good_num], filename):
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª {filename}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    await bot.delete_message(chat_id, callback_query.message.message_id)
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {n[good_num]}\n–¶–µ–Ω–∞: {p[good_num]}\n{'-' * 30}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {l[good_num]}"
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'prev-good_{category_index}_{category_good_index}')
    button2 = types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next-good_{category_index}_{category_good_index}')
    markup.add(button1, button2)
    await callback_query.message.answer_photo(open('good.jpg', 'rb'), caption=text, reply_markup=markup)

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(
        f'–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æüòï –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(db.create_database())
    executor.start_polling(dp, skip_updates=True)
